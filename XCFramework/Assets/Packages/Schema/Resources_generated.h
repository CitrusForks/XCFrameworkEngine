// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_RESOURCES_H_
#define FLATBUFFERS_GENERATED_RESOURCES_H_

#include "flatbuffers/flatbuffers.h"



struct Vec2;
struct Vec3;
struct Vec4;
struct FBBasicMaterial;
struct FBTexture2D;
struct FBCubeTexture3D;
struct FBXCMesh;
struct FBResources;

struct FBTexture2D FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *ResourceName() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *ResourcePath() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* ResourceName */) &&
           verifier.Verify(ResourceName()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* ResourcePath */) &&
           verifier.Verify(ResourcePath()) &&
           verifier.EndTable();
  }
};

struct FBTexture2DBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ResourceName(flatbuffers::Offset<flatbuffers::String> ResourceName) { fbb_.AddOffset(4, ResourceName); }
  void add_ResourcePath(flatbuffers::Offset<flatbuffers::String> ResourcePath) { fbb_.AddOffset(6, ResourcePath); }
  FBTexture2DBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FBTexture2DBuilder &operator=(const FBTexture2DBuilder &);
  flatbuffers::Offset<FBTexture2D> Finish() {
    auto o = flatbuffers::Offset<FBTexture2D>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<FBTexture2D> CreateFBTexture2D(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> ResourceName = 0,
   flatbuffers::Offset<flatbuffers::String> ResourcePath = 0) {
  FBTexture2DBuilder builder_(_fbb);
  builder_.add_ResourcePath(ResourcePath);
  builder_.add_ResourceName(ResourceName);
  return builder_.Finish();
}

struct FBCubeTexture3D FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *ResourceName() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *ResourcePath() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* ResourceName */) &&
           verifier.Verify(ResourceName()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* ResourcePath */) &&
           verifier.Verify(ResourcePath()) &&
           verifier.EndTable();
  }
};

struct FBCubeTexture3DBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ResourceName(flatbuffers::Offset<flatbuffers::String> ResourceName) { fbb_.AddOffset(4, ResourceName); }
  void add_ResourcePath(flatbuffers::Offset<flatbuffers::String> ResourcePath) { fbb_.AddOffset(6, ResourcePath); }
  FBCubeTexture3DBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FBCubeTexture3DBuilder &operator=(const FBCubeTexture3DBuilder &);
  flatbuffers::Offset<FBCubeTexture3D> Finish() {
    auto o = flatbuffers::Offset<FBCubeTexture3D>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<FBCubeTexture3D> CreateFBCubeTexture3D(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> ResourceName = 0,
   flatbuffers::Offset<flatbuffers::String> ResourcePath = 0) {
  FBCubeTexture3DBuilder builder_(_fbb);
  builder_.add_ResourcePath(ResourcePath);
  builder_.add_ResourceName(ResourceName);
  return builder_.Finish();
}

struct FBXCMesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *MeshName() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *MeshPath() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *TextureRes() const { return GetPointer<const flatbuffers::String *>(8); }
  const Vec3 *InitialScaling() const { return GetStruct<const Vec3 *>(10); }
  const Vec3 *InitialRotation() const { return GetStruct<const Vec3 *>(12); }
  ShaderType ShaderUsage() const { return static_cast<ShaderType>(GetField<int8_t>(14, 0)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* MeshName */) &&
           verifier.Verify(MeshName()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* MeshPath */) &&
           verifier.Verify(MeshPath()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* TextureRes */) &&
           verifier.Verify(TextureRes()) &&
           VerifyField<Vec3>(verifier, 10 /* InitialScaling */) &&
           VerifyField<Vec3>(verifier, 12 /* InitialRotation */) &&
           VerifyField<int8_t>(verifier, 14 /* ShaderUsage */) &&
           verifier.EndTable();
  }
};

struct FBXCMeshBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_MeshName(flatbuffers::Offset<flatbuffers::String> MeshName) { fbb_.AddOffset(4, MeshName); }
  void add_MeshPath(flatbuffers::Offset<flatbuffers::String> MeshPath) { fbb_.AddOffset(6, MeshPath); }
  void add_TextureRes(flatbuffers::Offset<flatbuffers::String> TextureRes) { fbb_.AddOffset(8, TextureRes); }
  void add_InitialScaling(const Vec3 *InitialScaling) { fbb_.AddStruct(10, InitialScaling); }
  void add_InitialRotation(const Vec3 *InitialRotation) { fbb_.AddStruct(12, InitialRotation); }
  void add_ShaderUsage(ShaderType ShaderUsage) { fbb_.AddElement<int8_t>(14, static_cast<int8_t>(ShaderUsage), 0); }
  FBXCMeshBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FBXCMeshBuilder &operator=(const FBXCMeshBuilder &);
  flatbuffers::Offset<FBXCMesh> Finish() {
    auto o = flatbuffers::Offset<FBXCMesh>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<FBXCMesh> CreateFBXCMesh(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> MeshName = 0,
   flatbuffers::Offset<flatbuffers::String> MeshPath = 0,
   flatbuffers::Offset<flatbuffers::String> TextureRes = 0,
   const Vec3 *InitialScaling = 0,
   const Vec3 *InitialRotation = 0,
   ShaderType ShaderUsage = ShaderType_Default) {
  FBXCMeshBuilder builder_(_fbb);
  builder_.add_InitialRotation(InitialRotation);
  builder_.add_InitialScaling(InitialScaling);
  builder_.add_TextureRes(TextureRes);
  builder_.add_MeshPath(MeshPath);
  builder_.add_MeshName(MeshName);
  builder_.add_ShaderUsage(ShaderUsage);
  return builder_.Finish();
}

struct FBResources FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<FBTexture2D>> *FBTexture2DS() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBTexture2D>> *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>> *FBXCMeshes() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>> *>(6); }
  const flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>> *FBMeshCustoms() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>> *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>> *FBMeshFBX() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>> *>(10); }
  const flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>> *FBVectorFontMesh() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>> *>(12); }
  const flatbuffers::Vector<flatbuffers::Offset<FBCubeTexture3D>> *FBCubeTexture3DS() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBCubeTexture3D>> *>(14); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* FBTexture2DS */) &&
           verifier.Verify(FBTexture2DS()) &&
           verifier.VerifyVectorOfTables(FBTexture2DS()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* FBXCMeshes */) &&
           verifier.Verify(FBXCMeshes()) &&
           verifier.VerifyVectorOfTables(FBXCMeshes()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* FBMeshCustoms */) &&
           verifier.Verify(FBMeshCustoms()) &&
           verifier.VerifyVectorOfTables(FBMeshCustoms()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* FBMeshFBX */) &&
           verifier.Verify(FBMeshFBX()) &&
           verifier.VerifyVectorOfTables(FBMeshFBX()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* FBVectorFontMesh */) &&
           verifier.Verify(FBVectorFontMesh()) &&
           verifier.VerifyVectorOfTables(FBVectorFontMesh()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* FBCubeTexture3DS */) &&
           verifier.Verify(FBCubeTexture3DS()) &&
           verifier.VerifyVectorOfTables(FBCubeTexture3DS()) &&
           verifier.EndTable();
  }
};

struct FBResourcesBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_FBTexture2DS(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBTexture2D>>> FBTexture2DS) { fbb_.AddOffset(4, FBTexture2DS); }
  void add_FBXCMeshes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>>> FBXCMeshes) { fbb_.AddOffset(6, FBXCMeshes); }
  void add_FBMeshCustoms(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>>> FBMeshCustoms) { fbb_.AddOffset(8, FBMeshCustoms); }
  void add_FBMeshFBX(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>>> FBMeshFBX) { fbb_.AddOffset(10, FBMeshFBX); }
  void add_FBVectorFontMesh(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>>> FBVectorFontMesh) { fbb_.AddOffset(12, FBVectorFontMesh); }
  void add_FBCubeTexture3DS(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBCubeTexture3D>>> FBCubeTexture3DS) { fbb_.AddOffset(14, FBCubeTexture3DS); }
  FBResourcesBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FBResourcesBuilder &operator=(const FBResourcesBuilder &);
  flatbuffers::Offset<FBResources> Finish() {
    auto o = flatbuffers::Offset<FBResources>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<FBResources> CreateFBResources(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBTexture2D>>> FBTexture2DS = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>>> FBXCMeshes = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>>> FBMeshCustoms = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>>> FBMeshFBX = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBXCMesh>>> FBVectorFontMesh = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBCubeTexture3D>>> FBCubeTexture3DS = 0) {
  FBResourcesBuilder builder_(_fbb);
  builder_.add_FBCubeTexture3DS(FBCubeTexture3DS);
  builder_.add_FBVectorFontMesh(FBVectorFontMesh);
  builder_.add_FBMeshFBX(FBMeshFBX);
  builder_.add_FBMeshCustoms(FBMeshCustoms);
  builder_.add_FBXCMeshes(FBXCMeshes);
  builder_.add_FBTexture2DS(FBTexture2DS);
  return builder_.Finish();
}

inline const FBResources *GetFBResources(const void *buf) { return flatbuffers::GetRoot<FBResources>(buf); }

inline bool VerifyFBResourcesBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<FBResources>(); }

inline void FinishFBResourcesBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<FBResources> root) { fbb.Finish(root); }


#endif  // FLATBUFFERS_GENERATED_RESOURCES_H_
