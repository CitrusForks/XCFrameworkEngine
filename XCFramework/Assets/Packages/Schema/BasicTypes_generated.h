/* XCFrameworkEngine
 * Copyright (C) Abhishek Porwal, 2016
 * Any queries? Contact author <https://github.com/abhishekp314>
 * This program is complaint with GNU General Public License, version 3.
 * For complete license, read License.txt in source root directory. */

// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_BASICTYPES_H_
#define FLATBUFFERS_GENERATED_BASICTYPES_H_

#include "flatbuffers/flatbuffers.h"



struct Vec3;
struct Vec4;
struct FBBasicMaterial;

enum FBERasterizer_Type {
  FBERasterizer_Type_FBRASTERIZERTYPE_FILL_WIREFRAME = 0,
  FBERasterizer_Type_FBRASTERIZERTYPE_FILL_SOLID = 1,
  FBERasterizer_Type_FBRASTERIZERTYPE_MAX = 2
};

inline const char **EnumNamesFBERasterizer_Type() {
  static const char *names[] = { "FBRASTERIZERTYPE_FILL_WIREFRAME", "FBRASTERIZERTYPE_FILL_SOLID", "FBRASTERIZERTYPE_MAX", nullptr };
  return names;
}

inline const char *EnumNameFBERasterizer_Type(FBERasterizer_Type e) { return EnumNamesFBERasterizer_Type()[e]; }

MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3(float x, float y, float z)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)), z_(flatbuffers::EndianScalar(z)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
  float z() const { return flatbuffers::EndianScalar(z_); }
};
STRUCT_END(Vec3, 12);

MANUALLY_ALIGNED_STRUCT(4) Vec4 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;
  float w_;

 public:
  Vec4(float x, float y, float z, float w)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)), z_(flatbuffers::EndianScalar(z)), w_(flatbuffers::EndianScalar(w)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
  float z() const { return flatbuffers::EndianScalar(z_); }
  float w() const { return flatbuffers::EndianScalar(w_); }
};
STRUCT_END(Vec4, 16);

struct FBBasicMaterial FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Vec4 *Ambient() const { return GetStruct<const Vec4 *>(4); }
  const Vec4 *Diffuse() const { return GetStruct<const Vec4 *>(6); }
  const Vec4 *Specular() const { return GetStruct<const Vec4 *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Vec4>(verifier, 4 /* Ambient */) &&
           VerifyField<Vec4>(verifier, 6 /* Diffuse */) &&
           VerifyField<Vec4>(verifier, 8 /* Specular */) &&
           verifier.EndTable();
  }
};

struct FBBasicMaterialBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Ambient(const Vec4 *Ambient) { fbb_.AddStruct(4, Ambient); }
  void add_Diffuse(const Vec4 *Diffuse) { fbb_.AddStruct(6, Diffuse); }
  void add_Specular(const Vec4 *Specular) { fbb_.AddStruct(8, Specular); }
  FBBasicMaterialBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FBBasicMaterialBuilder &operator=(const FBBasicMaterialBuilder &);
  flatbuffers::Offset<FBBasicMaterial> Finish() {
    auto o = flatbuffers::Offset<FBBasicMaterial>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<FBBasicMaterial> CreateFBBasicMaterial(flatbuffers::FlatBufferBuilder &_fbb,
   const Vec4 *Ambient = 0,
   const Vec4 *Diffuse = 0,
   const Vec4 *Specular = 0) {
  FBBasicMaterialBuilder builder_(_fbb);
  builder_.add_Specular(Specular);
  builder_.add_Diffuse(Diffuse);
  builder_.add_Ambient(Ambient);
  return builder_.Finish();
}


#endif  // FLATBUFFERS_GENERATED_BASICTYPES_H_
