// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_OPENWORLDSCENEGRAPH_H_
#define FLATBUFFERS_GENERATED_OPENWORLDSCENEGRAPH_H_

#include "flatbuffers/flatbuffers.h"

#include "BasicTypes_generated.h"
#include "GameplayActors_generated.h"
#include "ShaderTypes_generated.h"

struct FBSceneGraphRoot;

struct FBSceneGraph;

struct FBSceneGraphRoot FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FPSCAMERA = 4
  };
  bool FPSCamera() const { return GetField<uint8_t>(VT_FPSCAMERA, 0) != 0; }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FPSCAMERA) &&
           verifier.EndTable();
  }
};

struct FBSceneGraphRootBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_FPSCamera(bool FPSCamera) { fbb_.AddElement<uint8_t>(FBSceneGraphRoot::VT_FPSCAMERA, static_cast<uint8_t>(FPSCamera), 0); }
  FBSceneGraphRootBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FBSceneGraphRootBuilder &operator=(const FBSceneGraphRootBuilder &);
  flatbuffers::Offset<FBSceneGraphRoot> Finish() {
    auto o = flatbuffers::Offset<FBSceneGraphRoot>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<FBSceneGraphRoot> CreateFBSceneGraphRoot(flatbuffers::FlatBufferBuilder &_fbb,
    bool FPSCamera = false) {
  FBSceneGraphRootBuilder builder_(_fbb);
  builder_.add_FPSCamera(FPSCamera);
  return builder_.Finish();
}

struct FBSceneGraph FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ROOT = 4,
    VT_SCENENODES = 6
  };
  const FBSceneGraphRoot *Root() const { return GetPointer<const FBSceneGraphRoot *>(VT_ROOT); }
  const flatbuffers::Vector<flatbuffers::Offset<FBSceneNode>> *SceneNodes() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBSceneNode>> *>(VT_SCENENODES); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ROOT) &&
           verifier.VerifyTable(Root()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SCENENODES) &&
           verifier.Verify(SceneNodes()) &&
           verifier.VerifyVectorOfTables(SceneNodes()) &&
           verifier.EndTable();
  }
};

struct FBSceneGraphBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Root(flatbuffers::Offset<FBSceneGraphRoot> Root) { fbb_.AddOffset(FBSceneGraph::VT_ROOT, Root); }
  void add_SceneNodes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBSceneNode>>> SceneNodes) { fbb_.AddOffset(FBSceneGraph::VT_SCENENODES, SceneNodes); }
  FBSceneGraphBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FBSceneGraphBuilder &operator=(const FBSceneGraphBuilder &);
  flatbuffers::Offset<FBSceneGraph> Finish() {
    auto o = flatbuffers::Offset<FBSceneGraph>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<FBSceneGraph> CreateFBSceneGraph(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<FBSceneGraphRoot> Root = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBSceneNode>>> SceneNodes = 0) {
  FBSceneGraphBuilder builder_(_fbb);
  builder_.add_SceneNodes(SceneNodes);
  builder_.add_Root(Root);
  return builder_.Finish();
}

inline flatbuffers::Offset<FBSceneGraph> CreateFBSceneGraphDirect(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<FBSceneGraphRoot> Root = 0,
    const std::vector<flatbuffers::Offset<FBSceneNode>> *SceneNodes = nullptr) {
  return CreateFBSceneGraph(_fbb, Root, SceneNodes ? _fbb.CreateVector<flatbuffers::Offset<FBSceneNode>>(*SceneNodes) : 0);
}

inline const FBSceneGraph *GetFBSceneGraph(const void *buf) { return flatbuffers::GetRoot<FBSceneGraph>(buf); }

inline bool VerifyFBSceneGraphBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<FBSceneGraph>(nullptr); }

inline void FinishFBSceneGraphBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<FBSceneGraph> root) { fbb.Finish(root); }

#endif  // FLATBUFFERS_GENERATED_OPENWORLDSCENEGRAPH_H_
