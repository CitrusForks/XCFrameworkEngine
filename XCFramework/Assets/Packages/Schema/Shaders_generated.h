// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SHADERS_H_
#define FLATBUFFERS_GENERATED_SHADERS_H_

#include "flatbuffers/flatbuffers.h"



struct FBShader;
struct FBRootShader;

enum SHADERTYPE {
  SHADERTYPE_DEFAULT = 0,
  SHADERTYPE_COLORTECH = 1,
  SHADERTYPE_LIGHTTEXTURE = 2,
  SHADERTYPE_TERRIANMULTITEXTURE = 3,
  SHADERTYPE_SIMPLECUBEMAP = 4,
  SHADERTYPE_SKINNEDCHARACTER = 5,
  SHADERTYPE_VECTORFONT = 6,
  SHADERTYPE_MAX = 7
};

inline const char **EnumNamesSHADERTYPE() {
  static const char *names[] = { "DEFAULT", "COLORTECH", "LIGHTTEXTURE", "TERRIANMULTITEXTURE", "SIMPLECUBEMAP", "SKINNEDCHARACTER", "VECTORFONT", "MAX", nullptr };
  return names;
}

inline const char *EnumNameSHADERTYPE(SHADERTYPE e) { return EnumNamesSHADERTYPE()[e]; }

struct FBShader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  SHADERTYPE ShaderType() const { return static_cast<SHADERTYPE>(GetField<int8_t>(4, 0)); }
  const flatbuffers::String *VsPath() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *PsPath() const { return GetPointer<const flatbuffers::String *>(8); }
  uint8_t EnableDepth() const { return GetField<uint8_t>(10, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* ShaderType */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* VsPath */) &&
           verifier.Verify(VsPath()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* PsPath */) &&
           verifier.Verify(PsPath()) &&
           VerifyField<uint8_t>(verifier, 10 /* EnableDepth */) &&
           verifier.EndTable();
  }
};

struct FBShaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ShaderType(SHADERTYPE ShaderType) { fbb_.AddElement<int8_t>(4, static_cast<int8_t>(ShaderType), 0); }
  void add_VsPath(flatbuffers::Offset<flatbuffers::String> VsPath) { fbb_.AddOffset(6, VsPath); }
  void add_PsPath(flatbuffers::Offset<flatbuffers::String> PsPath) { fbb_.AddOffset(8, PsPath); }
  void add_EnableDepth(uint8_t EnableDepth) { fbb_.AddElement<uint8_t>(10, EnableDepth, 0); }
  FBShaderBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FBShaderBuilder &operator=(const FBShaderBuilder &);
  flatbuffers::Offset<FBShader> Finish() {
    auto o = flatbuffers::Offset<FBShader>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<FBShader> CreateFBShader(flatbuffers::FlatBufferBuilder &_fbb,
   SHADERTYPE ShaderType = SHADERTYPE_DEFAULT,
   flatbuffers::Offset<flatbuffers::String> VsPath = 0,
   flatbuffers::Offset<flatbuffers::String> PsPath = 0,
   uint8_t EnableDepth = 0) {
  FBShaderBuilder builder_(_fbb);
  builder_.add_PsPath(PsPath);
  builder_.add_VsPath(VsPath);
  builder_.add_EnableDepth(EnableDepth);
  builder_.add_ShaderType(ShaderType);
  return builder_.Finish();
}

struct FBRootShader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<FBShader>> *FBShaders() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBShader>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* FBShaders */) &&
           verifier.Verify(FBShaders()) &&
           verifier.VerifyVectorOfTables(FBShaders()) &&
           verifier.EndTable();
  }
};

struct FBRootShaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_FBShaders(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBShader>>> FBShaders) { fbb_.AddOffset(4, FBShaders); }
  FBRootShaderBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FBRootShaderBuilder &operator=(const FBRootShaderBuilder &);
  flatbuffers::Offset<FBRootShader> Finish() {
    auto o = flatbuffers::Offset<FBRootShader>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<FBRootShader> CreateFBRootShader(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBShader>>> FBShaders = 0) {
  FBRootShaderBuilder builder_(_fbb);
  builder_.add_FBShaders(FBShaders);
  return builder_.Finish();
}

inline const FBRootShader *GetFBRootShader(const void *buf) { return flatbuffers::GetRoot<FBRootShader>(buf); }

inline bool VerifyFBRootShaderBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<FBRootShader>(); }

inline void FinishFBRootShaderBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<FBRootShader> root) { fbb.Finish(root); }


#endif  // FLATBUFFERS_GENERATED_SHADERS_H_
