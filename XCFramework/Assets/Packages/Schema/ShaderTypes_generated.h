// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SHADERTYPES_H_
#define FLATBUFFERS_GENERATED_SHADERTYPES_H_

#include "flatbuffers/flatbuffers.h"

#include "BasicTypes_generated.h"

struct FBBasicMaterial;

enum ShaderType {
  ShaderType_Default = 0,
  ShaderType_SolidColor = 1,
  ShaderType_RenderTexture = 2,
  ShaderType_LightTexture = 3,
  ShaderType_DeferredLighting = 4,
  ShaderType_TerrainMultiTexture = 5,
  ShaderType_SimpleCubeMap = 6,
  ShaderType_SkinnedCharacter = 7,
  ShaderType_VectorFont = 8,
  ShaderType_Max = 9,
  ShaderType_MIN = ShaderType_Default,
  ShaderType_MAX = ShaderType_Max
};

inline const char **EnumNamesShaderType() {
  static const char *names[] = { "Default", "SolidColor", "RenderTexture", "LightTexture", "DeferredLighting", "TerrainMultiTexture", "SimpleCubeMap", "SkinnedCharacter", "VectorFont", "Max", nullptr };
  return names;
}

inline const char *EnumNameShaderType(ShaderType e) { return EnumNamesShaderType()[static_cast<int>(e)]; }

enum VertexFormat {
  VertexFormat_Position = 0,
  VertexFormat_PositionColor = 1,
  VertexFormat_PositionNormal = 2,
  VertexFormat_PositionTexture = 3,
  VertexFormat_PositionNormalTexture = 4,
  VertexFormat_PositionNormalTextureBlendIndexBlendWeight = 5,
  VertexFormat_PositionColorInstanceIndex = 6,
  VertexFormat_Invalid = 7,
  VertexFormat_MIN = VertexFormat_Position,
  VertexFormat_MAX = VertexFormat_Invalid
};

inline const char **EnumNamesVertexFormat() {
  static const char *names[] = { "Position", "PositionColor", "PositionNormal", "PositionTexture", "PositionNormalTexture", "PositionNormalTextureBlendIndexBlendWeight", "PositionColorInstanceIndex", "Invalid", nullptr };
  return names;
}

inline const char *EnumNameVertexFormat(VertexFormat e) { return EnumNamesVertexFormat()[static_cast<int>(e)]; }

enum RasterType {
  RasterType_FillWireframe = 0,
  RasterType_FillSolid = 1,
  RasterType_Max = 2,
  RasterType_MIN = RasterType_FillWireframe,
  RasterType_MAX = RasterType_Max
};

inline const char **EnumNamesRasterType() {
  static const char *names[] = { "FillWireframe", "FillSolid", "Max", nullptr };
  return names;
}

inline const char *EnumNameRasterType(RasterType e) { return EnumNamesRasterType()[static_cast<int>(e)]; }

struct FBBasicMaterial FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_AMBIENT = 4,
    VT_DIFFUSE = 6,
    VT_SPECULAR = 8
  };
  const Vec4 *Ambient() const { return GetStruct<const Vec4 *>(VT_AMBIENT); }
  const Vec4 *Diffuse() const { return GetStruct<const Vec4 *>(VT_DIFFUSE); }
  const Vec4 *Specular() const { return GetStruct<const Vec4 *>(VT_SPECULAR); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Vec4>(verifier, VT_AMBIENT) &&
           VerifyField<Vec4>(verifier, VT_DIFFUSE) &&
           VerifyField<Vec4>(verifier, VT_SPECULAR) &&
           verifier.EndTable();
  }
};

struct FBBasicMaterialBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Ambient(const Vec4 *Ambient) { fbb_.AddStruct(FBBasicMaterial::VT_AMBIENT, Ambient); }
  void add_Diffuse(const Vec4 *Diffuse) { fbb_.AddStruct(FBBasicMaterial::VT_DIFFUSE, Diffuse); }
  void add_Specular(const Vec4 *Specular) { fbb_.AddStruct(FBBasicMaterial::VT_SPECULAR, Specular); }
  FBBasicMaterialBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FBBasicMaterialBuilder &operator=(const FBBasicMaterialBuilder &);
  flatbuffers::Offset<FBBasicMaterial> Finish() {
    auto o = flatbuffers::Offset<FBBasicMaterial>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<FBBasicMaterial> CreateFBBasicMaterial(flatbuffers::FlatBufferBuilder &_fbb,
    const Vec4 *Ambient = 0,
    const Vec4 *Diffuse = 0,
    const Vec4 *Specular = 0) {
  FBBasicMaterialBuilder builder_(_fbb);
  builder_.add_Specular(Specular);
  builder_.add_Diffuse(Diffuse);
  builder_.add_Ambient(Ambient);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_SHADERTYPES_H_
