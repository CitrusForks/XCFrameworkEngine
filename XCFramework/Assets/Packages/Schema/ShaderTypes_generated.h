// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SHADERTYPES_H_
#define FLATBUFFERS_GENERATED_SHADERTYPES_H_

#include "flatbuffers/flatbuffers.h"



struct Vec2;
struct Vec3;
struct Vec4;
struct FBBasicMaterial;

enum ShaderType {
  ShaderType_Default = 0,
  ShaderType_SolidColor = 1,
  ShaderType_LightTexture = 2,
  ShaderType_TerrainMultiTexture = 3,
  ShaderType_SimpleCubeMap = 4,
  ShaderType_SkinnedCharacter = 5,
  ShaderType_VectorFont = 6,
  ShaderType_Max = 7
};

inline const char **EnumNamesShaderType() {
  static const char *names[] = { "Default", "SolidColor", "LightTexture", "TerrainMultiTexture", "SimpleCubeMap", "SkinnedCharacter", "VectorFont", "Max", nullptr };
  return names;
}

inline const char *EnumNameShaderType(ShaderType e) { return EnumNamesShaderType()[e]; }

enum VertexFormat {
  VertexFormat_Position = 0,
  VertexFormat_PositionColor = 1,
  VertexFormat_PositionNormal = 2,
  VertexFormat_PositionNormalTexture = 3,
  VertexFormat_PositionNormalTextureBlendIndexBlendWeight = 4,
  VertexFormat_PositionColorInstanceIndex = 5,
  VertexFormat_Invalid = 6
};

inline const char **EnumNamesVertexFormat() {
  static const char *names[] = { "Position", "PositionColor", "PositionNormal", "PositionNormalTexture", "PositionNormalTextureBlendIndexBlendWeight", "PositionColorInstanceIndex", "Invalid", nullptr };
  return names;
}

inline const char *EnumNameVertexFormat(VertexFormat e) { return EnumNamesVertexFormat()[e]; }

enum RasterType {
  RasterType_FillWireframe = 0,
  RasterType_FillSolid = 1,
  RasterType_Max = 2
};

inline const char **EnumNamesRasterType() {
  static const char *names[] = { "FillWireframe", "FillSolid", "Max", nullptr };
  return names;
}

inline const char *EnumNameRasterType(RasterType e) { return EnumNamesRasterType()[e]; }

struct FBBasicMaterial FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Vec4 *Ambient() const { return GetStruct<const Vec4 *>(4); }
  const Vec4 *Diffuse() const { return GetStruct<const Vec4 *>(6); }
  const Vec4 *Specular() const { return GetStruct<const Vec4 *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Vec4>(verifier, 4 /* Ambient */) &&
           VerifyField<Vec4>(verifier, 6 /* Diffuse */) &&
           VerifyField<Vec4>(verifier, 8 /* Specular */) &&
           verifier.EndTable();
  }
};

struct FBBasicMaterialBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Ambient(const Vec4 *Ambient) { fbb_.AddStruct(4, Ambient); }
  void add_Diffuse(const Vec4 *Diffuse) { fbb_.AddStruct(6, Diffuse); }
  void add_Specular(const Vec4 *Specular) { fbb_.AddStruct(8, Specular); }
  FBBasicMaterialBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FBBasicMaterialBuilder &operator=(const FBBasicMaterialBuilder &);
  flatbuffers::Offset<FBBasicMaterial> Finish() {
    auto o = flatbuffers::Offset<FBBasicMaterial>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<FBBasicMaterial> CreateFBBasicMaterial(flatbuffers::FlatBufferBuilder &_fbb,
   const Vec4 *Ambient = 0,
   const Vec4 *Diffuse = 0,
   const Vec4 *Specular = 0) {
  FBBasicMaterialBuilder builder_(_fbb);
  builder_.add_Specular(Specular);
  builder_.add_Diffuse(Diffuse);
  builder_.add_Ambient(Ambient);
  return builder_.Finish();
}


#endif  // FLATBUFFERS_GENERATED_SHADERTYPES_H_
