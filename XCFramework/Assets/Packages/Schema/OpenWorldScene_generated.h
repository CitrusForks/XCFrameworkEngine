/* XCFrameworkEngine
 * Copyright (C) Abhishek Porwal, 2016
 * Any queries? Contact author <https://github.com/abhishekp314>
 * This program is complaint with GNU General Public License, version 3.
 * For complete license, read License.txt in source root directory. */

// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_OPENWORLDSCENE_H_
#define FLATBUFFERS_GENERATED_OPENWORLDSCENE_H_

#include "flatbuffers/flatbuffers.h"



struct Vec3;
struct Vec4;
struct FBBasicMaterial;
struct FBSimpleSkyBox;
struct FBTexturePlane;
struct FBLiveDriveTexturePlane;
struct FBWaves;
struct FBMultiTexturedTerrain;
struct FBCar;
struct FBDoor;
struct FBSoldier;
struct FBOpenWorldScene;

struct FBOpenWorldScene FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<FBSoldier>> *FBSoldiers() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBSoldier>> *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<FBCar>> *FBCars() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBCar>> *>(6); }
  const flatbuffers::Vector<flatbuffers::Offset<FBTexturePlane>> *FBTexturePlanes() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBTexturePlane>> *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<FBLiveDriveTexturePlane>> *FBLiveDriveTexturePlanes() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBLiveDriveTexturePlane>> *>(10); }
  const flatbuffers::Vector<flatbuffers::Offset<FBMultiTexturedTerrain>> *FBMultiTexturedTerrains() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBMultiTexturedTerrain>> *>(12); }
  const flatbuffers::Vector<flatbuffers::Offset<FBWaves>> *FBWavess() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBWaves>> *>(14); }
  const flatbuffers::Vector<flatbuffers::Offset<FBSimpleSkyBox>> *FBSimpleSkyBoxes() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBSimpleSkyBox>> *>(16); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* FBSoldiers */) &&
           verifier.Verify(FBSoldiers()) &&
           verifier.VerifyVectorOfTables(FBSoldiers()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* FBCars */) &&
           verifier.Verify(FBCars()) &&
           verifier.VerifyVectorOfTables(FBCars()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* FBTexturePlanes */) &&
           verifier.Verify(FBTexturePlanes()) &&
           verifier.VerifyVectorOfTables(FBTexturePlanes()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* FBLiveDriveTexturePlanes */) &&
           verifier.Verify(FBLiveDriveTexturePlanes()) &&
           verifier.VerifyVectorOfTables(FBLiveDriveTexturePlanes()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* FBMultiTexturedTerrains */) &&
           verifier.Verify(FBMultiTexturedTerrains()) &&
           verifier.VerifyVectorOfTables(FBMultiTexturedTerrains()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* FBWavess */) &&
           verifier.Verify(FBWavess()) &&
           verifier.VerifyVectorOfTables(FBWavess()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* FBSimpleSkyBoxes */) &&
           verifier.Verify(FBSimpleSkyBoxes()) &&
           verifier.VerifyVectorOfTables(FBSimpleSkyBoxes()) &&
           verifier.EndTable();
  }
};

struct FBOpenWorldSceneBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_FBSoldiers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBSoldier>>> FBSoldiers) { fbb_.AddOffset(4, FBSoldiers); }
  void add_FBCars(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBCar>>> FBCars) { fbb_.AddOffset(6, FBCars); }
  void add_FBTexturePlanes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBTexturePlane>>> FBTexturePlanes) { fbb_.AddOffset(8, FBTexturePlanes); }
  void add_FBLiveDriveTexturePlanes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBLiveDriveTexturePlane>>> FBLiveDriveTexturePlanes) { fbb_.AddOffset(10, FBLiveDriveTexturePlanes); }
  void add_FBMultiTexturedTerrains(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBMultiTexturedTerrain>>> FBMultiTexturedTerrains) { fbb_.AddOffset(12, FBMultiTexturedTerrains); }
  void add_FBWavess(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBWaves>>> FBWavess) { fbb_.AddOffset(14, FBWavess); }
  void add_FBSimpleSkyBoxes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBSimpleSkyBox>>> FBSimpleSkyBoxes) { fbb_.AddOffset(16, FBSimpleSkyBoxes); }
  FBOpenWorldSceneBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FBOpenWorldSceneBuilder &operator=(const FBOpenWorldSceneBuilder &);
  flatbuffers::Offset<FBOpenWorldScene> Finish() {
    auto o = flatbuffers::Offset<FBOpenWorldScene>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<FBOpenWorldScene> CreateFBOpenWorldScene(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBSoldier>>> FBSoldiers = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBCar>>> FBCars = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBTexturePlane>>> FBTexturePlanes = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBLiveDriveTexturePlane>>> FBLiveDriveTexturePlanes = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBMultiTexturedTerrain>>> FBMultiTexturedTerrains = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBWaves>>> FBWavess = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBSimpleSkyBox>>> FBSimpleSkyBoxes = 0) {
  FBOpenWorldSceneBuilder builder_(_fbb);
  builder_.add_FBSimpleSkyBoxes(FBSimpleSkyBoxes);
  builder_.add_FBWavess(FBWavess);
  builder_.add_FBMultiTexturedTerrains(FBMultiTexturedTerrains);
  builder_.add_FBLiveDriveTexturePlanes(FBLiveDriveTexturePlanes);
  builder_.add_FBTexturePlanes(FBTexturePlanes);
  builder_.add_FBCars(FBCars);
  builder_.add_FBSoldiers(FBSoldiers);
  return builder_.Finish();
}

inline const FBOpenWorldScene *GetFBOpenWorldScene(const void *buf) { return flatbuffers::GetRoot<FBOpenWorldScene>(buf); }

inline bool VerifyFBOpenWorldSceneBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<FBOpenWorldScene>(); }

inline void FinishFBOpenWorldSceneBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<FBOpenWorldScene> root) { fbb.Finish(root); }


#endif  // FLATBUFFERS_GENERATED_OPENWORLDSCENE_H_
